# Minimum CMake version
cmake_minimum_required(VERSION 3.1)

# Name project
project(8BitEngine)

# Set target to DEBUG
set (debug_or_release_mode "Debug")
set (CMAKE_CONFIGURATION_TYPES ${debug_or_release_mode})
set (CMAKE_BUILD_TYPE ${debug_or_release_mode})
if(NOT CMAKE_BUILD_TYPE MATCHES "Release")
add_definitions (-DDEBUG)
endif(NOT CMAKE_BUILD_TYPE MATCHES "Release")

# Add files
file (GLOB source_files "${PROJECT_SOURCE_DIR}/src/*.cpp")
file (GLOB include_files "${PROJECT_SOURCE_DIR}/include/*.h")
file (GLOB lua_scripts "${PROJECT_SOURCE_DIR}/res/*.lua")

# Set flags for GCC
if(CMAKE_COMPILER_IS_GNUCXX)
    message(STATUS "GCC detected, adding compile flags")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror -std=c++17 -O2")
endif(CMAKE_COMPILER_IS_GNUCXX)

# Set flags for Visual Studio and put header files in include folder
if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
	message(STATUS "MSVC detected, adding compile flags")
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++17 /W4 /WX /O2")
endif(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")

# Set SFML to link statically
set(SFML_STATIC_LIBRARIES TRUE)
set(CMAKE_FIND_FRAMEWORK LAST)

# Find SFML
set(SFML_DIR "${PROJECT_SOURCE_DIR}/SFML/lib/cmake/SFML")
find_package(SFML 2.5 COMPONENTS graphics audio main REQUIRED)

# Find Lua
link_directories(${PROJECT_SOURCE_DIR}/lua/)

# Add source code to executable and link with SFML and Lua
include_directories(${PROJECT_NAME} ${PROJECT_SOURCE_DIR}/include/ ${PROJECT_SOURCE_DIR}/lua/)
add_executable(${PROJECT_NAME} ${source_files} ${include_files} ${lua_source_files} ${lua_scripts})
target_link_libraries(${PROJECT_NAME} sfml-graphics sfml-audio sfml-main lua53)

# Get rid of command prompt window if on Windows and release mode
if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
	if (debug_or_release_mode MATCHES "Release")
		set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS /SUBSYSTEM:WINDOWS)
	endif (debug_or_release_mode MATCHES "Release")
endif(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")